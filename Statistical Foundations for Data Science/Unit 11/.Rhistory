scale_x_continuous("Age", breaks = seq(0,0.35,0.05))+
scale_y_continuous("Sex", breaks = seq(0,1,by = 1))+
theme_bw() + labs(title="Scatterplot") + facet_wrap( ~ Survived)
ggplot(train, aes(Age, Sex)) + geom_point(aes(color = Survived)) +
scale_x_continuous("Age", breaks = seq(0,0.35,0.05))+
("Sex", breaks = seq(0,1,by = 1))+
ggplot(train, aes(Age, Sex)) + geom_point(aes(color = Survived)) +
scale_x_continuous("Age", breaks = seq(0,0.35,0.05))+
scale_y_discrete("Sex", breaks = seq(0,1,by = 1))+
theme_bw() + labs(title="Scatterplot") + facet_wrap( ~ Survived)
ggplot(train, aes(Age, Sex)) + geom_point(aes(color = Survived)) +
scale_x_continuous("Age", breaks = seq(0,80,0.05))+
scale_y_discrete("Sex", breaks = seq(0,1,by = 1))+
theme_bw() + labs(title="Scatterplot") + facet_wrap( ~ Survived)
ggplot(train, aes(Age, Sex)) + geom_point(aes(color = Survived)) +
scale_x_continuous("Age", breaks = seq(0,80,0.05))+
scale_y_discrete("Sex", breaks = seq(0,1,by = 1))+
theme_bw() + labs(title="Scatterplot") + facet_wrap( ~ Survived)
ggplot(train, aes(Age, Sex)) + geom_point(aes(color = Survived)) +
scale_x_continuous("Age", breaks = seq(0,80,0.05))+
scale_y_discrete("Sex", breaks = seq(0,1,by = 1))+
theme_bw() + labs(title="Scatterplot") + facet_wrap( ~ Survived)
ggplot(train, aes(Age, Sex)) + geom_point(aes(color = Survived)) +
scale_x_continuous("Age", breaks = seq(0,80,0.05))+
scale_y_discrete("Sex", breaks = seq(0,1,by = 1))+
theme_bw() + labs(title="Scatterplot") + facet_wrap( ~ Survived)
l <- ggplot(train, aes(Age, Sex), na.rm = TRUE)
l + geom_raster(aes(fill= Survived), na.rm = TRUE)
train$Survived <- with(train, sqrt(delta_long^2 + delta_lat^2))
ggplot(train, aes(Age, Survived)) + geom_point(aes(color = Pclass)) +
scale_x_continuous("Age", breaks = seq(0,80,0.05))+
scale_y_discrete("Survived", breaks = seq(0,1,by = 1))+
theme_bw() + labs(title="Scatterplot") + facet_wrap( ~ Pclass)
l <- ggplot(train, aes(Age, Sex), na.rm = TRUE)
l + geom_raster(aes(fill= Survived), na.rm = TRUE)
ggplot(train, aes(Age, fill = Survived)) + geom_bar()+
labs(title = "Stacked Bar Chart", x = "Outlet Location Type", y = "Count of Outlets")
ggplot(train, aes(Age, fill = Sex)) + geom_bar()+
labs(title = "Stacked Bar Chart", x = "Outlet Location Type", y = "Count of Outlets")
ggplot(train, aes(Age, fill = Sex, group = Survived)) + geom_bar()+
labs(title = "Stacked Bar Chart", x = "Outlet Location Type", y = "Count of Outlets")
ggplot(train, aes(Age, fill = Sex)) + geom_bar()+
labs(title = "Stacked Bar Chart", x = "Outlet Location Type", y = "Count of Outlets")
install.packages("devtools")
test <- read.csv("test.csv")
install.packages("easyGgplot2")
variables <- read.xlsx("Variables.xlsx", "sheet1")
library(xlsx)
variables <- read.xlsx("Variables.xlsx", "sheet1")
variables <- read.xlsx("Variables.xlsx", "Sheet1")
library(kableExtra)
kable((variables), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 12)
library(kable)
library(kableExtra)
kable((variables), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 12)
install.packages("kable")
install.packages("crayon")
ok <- sapply(file.info(lib)$isdir, isTRUE) & (file.access(lib, 2) == 0)
file.info
file.info(library(package))
.libPaths( c( .libPaths(), "~/userLibrary") )
.libpaths()
.libPaths()
install.packages("kable")
.libPaths("C:/Users/Marin Family/Documents/R/win-library/3.4")
.libPaths()
.libPaths(NULL)
R_LIBS=C:/Users/Marin Family/Documents/R/win-library/3.4
assign(".lib.loc", "C:/Users/Marin Family/Documents/R/win-library/3.4", envir = environment(.libPaths))
.libPaths()
install.packages("kable")
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(magrittr)
library(kableExtra)
kable((variables), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 12)
library(reshape2)
library(magrittr)
library(kableExtra)
kable((variables), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 12)
library(xlsx)
library(ggplot2)
library(sqldf)
library(reshape2)
library(magrittr)
library(kableExtra)
kable((variables), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 12)
?kable
library(xlsx)
library(knitr)
kable((variables), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 12)
variables <- read.xlsx("Variables.xlsx", "Sheet1")
R_LIBS
lib.paths()
lib_paths()
missingValue <- sapply(full, function(feature){
sum(is.na(feature))/length(feature)
})
missingValue <- sapply(train, function(feature){
sum(is.na(feature))/length(feature)
})
missingValue = data.frame(missingValuePercentage = missingValue, feature = names(missingValue))
View(missingValue)
missingValue <- sapply(train, function(feature){
sum(is.na(feature))/length(feature)
})
missingValue = data.frame(missingValuePercentage = missingValue, feature = names(missingValue))
View(missingValue)
train <- read.csv("train.csv")
#Adding a column to train to indicate that it is the train set
train$Set <- "train"
test <- read.csv("test.csv")
test$Set <- "test"
test$Survived <- NULL
#Combining the train and test set so that we can clean the data for both sets
combined <- rbind(train,test)
train <- read.csv("train.csv")
#Adding a column to train to indicate that it is the train set
train$Set <- "train"
test <- read.csv("test.csv")
test$Set <- "test"
train <- read.csv("train.csv")
#Adding a column to train to indicate that it is the train set
train$Set <- "train"
test <- read.csv("test.csv")
test$Set <- "test"
View(train)
View(test)
test$Survived <- NA
combined <- rbind(train,test)
class(combined$PassengerId)
class(combined$Survived)
class(combined$Pclass)
class(combined$Name)
class(combined$Sex)
class(combined$Age)
class(combined$SibSp)
class(combined$Parch)
class(combined$Ticket)
class(combined$Fare)
class(combined$Sex)
class(combined$Embarked)
class(combined$Embarked)
missingValue <- sapply(combined, function(feature){
sum(is.na(feature))/length(feature)
})
missingValue = data.frame(missingValuePercentage = missingValue, feature = names(missingValue))
g <- ggplot(data = filter(missingValue,feature!="Survived" & missingValuePercentage != 0),
aes(reorder(feature, missingValuePercentage),missingValuePercentage))
function(feature){
sum(is.na(feature))/length(feature)
missingValue = data.frame(missingValuePercentage = missingValue, feature = names(missingValue))
g <- ggplot(data = filter(missingValue,feature!="Survived" & missingValuePercentage != 0),
aes(reorder(feature, missingValuePercentage),missingValuePercentage))
g <- g + geom_bar(stat = "identity", fill="red")
g <- g + coord_flip() + labs("Missing values ranking [%]", "Feature", "Missing Values [%]") + theme_bw()
g
missingValue <- sapply(combined, function(feature){
sum(is.na(feature))/length(feature)
})
missingValue = data.frame(missingValuePercentage = missingValue, feature = names(missingValue))
g <- ggplot(data = filter(missingValue,feature!="Survived" & missingValuePercentage != 0),
aes(reorder(feature, missingValuePercentage),missingValuePercentage))
g <- g + geom_bar(stat = "identity", fill="red")
g <- g + coord_flip() + labs("Missing values ranking [%]", "Feature", "Missing Values [%]") + theme_bw()
g
missingValue = data.frame(missingValuePercentage = missingValue, feature = names(missingValue))
g <- ggplot(data = filter(missingValue,feature!="Survived" & missingValuePercentage != 0),
aes(reorder(feature, missingValuePercentage),missingValuePercentage))
g <- g + geom_bar(stat = "identity", fill="red")
g <- g + coord_flip() + labs("Missing values ranking [%]", "Feature", "Missing Values [%]") + theme_bw()
g
missingValue <- sapply(combined, function(feature){
sum(is.na(feature))/length(feature)
})
missingValue = data.frame(missingValuePercentage = missingValue, feature = names(missingValue))
g <- ggplot(data = filter(missingValue,feature!="Survived" & missingValuePercentage != 0),
aes(reorder(feature, missingValuePercentage),missingValuePercentage))
missingValue <- sapply(combined, function(feature){
sum(is.na(feature))/length(feature)
})
missingValue <- sapply(combined, sum(is.na(feature))/length(feature))
missingValue <- sapply(combined, sum(is.na(combined))/length(combined))
sapply(combined, function(x) sum(is.na(x)))
Combined$AgeClass <- sqldf("SELECT CASE WHEN Age <= 2 then "Infant" when Age <= 5 then "Toddler" when Age <= 12 then "Child" when Age <= 18 then "Teen" when Age <= 30 "Adult" when Age <= 40 "OlderAdult" when Age <= 65 "OvertheHill" else "Senior" end as "AgeClass" from combined)
Combined$AgeClass <- sqldf("SELECT CASE WHEN Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 'Adult' when Age <= 40 'OlderAdult' when Age <= 65 'OvertheHill' else 'Senior' end as 'AgeClass' from combined")
Combined$AgeClass <- sqldf("SELECT CASE WHEN Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 then 'Adult' when Age <= 40 'OlderAdult' when Age <= 65 'OvertheHill' else 'Senior' end as 'AgeClass' from combined")
Combined$AgeClass <- sqldf("SELECT CASE WHEN Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 then 'Adult' when Age <= 40 then 'OlderAdult' when Age <= 65 'OvertheHill' else 'Senior' end as 'AgeClass' from combined")
Combined$AgeClass <- sqldf("SELECT CASE WHEN Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 then 'Adult' when Age <= 40 then 'OlderAdult' when Age <= 65 then 'OvertheHill' else 'Senior' end as 'AgeClass' from combined")
combined$AgeClass <- sqldf("SELECT CASE WHEN Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 then 'Adult' when Age <= 40 then 'OlderAdult' when Age <= 65 then 'OvertheHill' else 'Senior' end as 'AgeClass' from combined")
View(combined)
combined$AgeClass <- NULL
combined$AgeClass <- sqldf("SELECT CASE WHEN Age is Null then NULL when Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 then 'Adult' when Age <= 40 then 'OlderAdult' when Age <= 65 then 'OvertheHill' else 'Senior' end as 'AgeClass' from combined")
View(combined)
combined$Title <- gsub(combined$Name, ",.*$"
combined$Title <- gsub(combined$Name, ",.*$")
?gsub
combined$Title <- gsub( ",.*$", combined$Name)
combined$Title <- grep( ",.*$", combined$Name)
combined$Title <- gsub( ",.*$", , combined$Name)
combined$Title <- gsub( ",.*$", '' , combined$Name)
combined$Title <- gsub( "^.*, ", '' , combined$Name)
combined$Title <- gsub(" .*" , '', combined$Title)
ggplot(combined, aes(x=Age, group = AgeClass)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+   facet_grid(~Survived, labeller = label_both) + theme(legend.position="none")
ggplot(combined, aes(x=Age, group = AgeClass)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+   facet_grid(~AgeClass, labeller = label_both) + theme(legend.position="none")
ggplot(combined, aes(x=AgeClass, group = Age)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+   facet_grid(~AgeClass, labeller = label_both) + theme(legend.position="none")
aggregate(combined[, combined$Age], list(combined$AgeClass), median)
combined$AgeClass <- NULL
combined$AgeClass <- sqldf("SELECT CASE WHEN Age is Null then NULL when Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 then 'Adult' when Age <= 40 then 'OlderAdult' when Age <= 65 then 'OvertheHill' else 'Senior' end as 'AgeClass' from combined")
combined$AgeClass <- NULL
combined <- sqldf("SELECT a.*, CASE WHEN Age is Null then NULL when Age <= 2 then 'Infant' when Age <= 5 then 'Toddler' when Age <= 12 then 'Child' when Age <= 18 then 'Teen' when Age <= 30 then 'Adult' when Age <= 40 then 'OlderAdult' when Age <= 65 then 'OvertheHill' else 'Senior' end as 'AgeClass' from combined a")
aggregate(combined[, combined$Age], list(combined$AgeClass), median)
group_by(combined$AgeClass) %>%
summarise_at(vars(Age), funs(mean(., na.rm=TRUE)))
library(dplyr)
group_by(combined$AgeClass) %>%
summarise_at(vars(Age), funs(mean(., na.rm=TRUE)))
summaryBy(Age ~ AgeClass, data = combined, fun = list(mean, max,min, median, sd))
library(doBy)
summaryBy(Age ~ AgeClass, data = combined, fun = list(mean, max,min, median, sd))
summaryBy(Age ~ Title, data = combined, fun = list(mean, max,min, median, sd))
summaryBy(Age ~ Title, data = combined, fun = list(mean, max,min, median, sd))
summaryBy(Age ~ Title, data = combined, FUN = list(mean, max,min, median, sd))
summaryBy(Age ~ Title, data = combined, FUN = list(count, mean, max,min, median, sd))
?summaryBy
summaryBy(Age ~ Title, data = combined, FUN =  list(mean, max,min, median, sd))
FilledAges <- sqldf("SELECT * FROM combined where Age is not null")
summaryBy(Age ~ Title, data = FilledAges, FUN =  list(mean, max,min, median, sd))
MissingAges <- sqldf("SELECT * FROM combined where Age is null")
summaryBy(Age ~ Title, data = FilledAges, FUN =  list(mean, max,min, median, sd))
MissingAgesTitle <- sqldf("SELECT Title, count(*) FROM combined where Age is null group by Title")
View(MissingAgesTitle)
summaryBy(Age ~ Title, data = FilledAges, FUN =  list(mean, max,min, median, sd))
summaryBy(Age ~ Title, data = MissingAgesTitle, FUN =  list(mean, max,min, median, sd))
MissingAgesTitle <- sqldf("SELECT Title, count(*) as 'Count' FROM combined where Age is null group by Title")
summaryBy(Count, data = MissingAgesTitle, FUN =  list(mean, max,min, median, sd))
summaryBy(Count, data = MissingAgesTitle, FUN =  list(mean, max,min, median, sd))
summaryBy(Age ~ Title, data = FilledAges, FUN =  list(mean, max,min, median, sd))
combined <- sqldf("select a.*,  case
when Age is null and Title = 'Capt.' then 70
when Age is null and Title = 'Col.' then 54
when Age is null and Title = 'Don.' then 40
when Age is null and Title = 'Dona.' then 39
when Age is null and Title = 'Dr.' then 49
when Age is null and Title = 'Lady' then 48
when Age is null and Title = 'Major.' then 48
when Age is null and Title = 'Master.' then 4
when Age is null and Title = 'Miss.' then 22
when Age is null and Title = 'Mlle.' then 24
when Age is null and Title = 'Mme.' then 24
when Age is null and Title = 'Mr.' then 29
when Age is null and Title = 'Mrs.' then 40
when Age is null and Title = 'Ms.' then 28
when Age is null and Title = 'Rev.' then 42
when Age is null and Title = 'Sir.' then 49
else Age end as 'ImputedAge' from combined a")
sapply(combined, function(x) sum(is.na(x)))
combined$AgeClass <- NULL
combined <- sqldf("SELECT a.*, CASE WHEN ImputedAge is Null then NULL when ImputedAge <= 2 then 'Infant' when ImputedAge <= 5 then 'Toddler' when ImputedAge <= 12 then 'Child' when ImputedAge <= 18 then 'Teen' when ImputedAge <= 30 then 'Adult' when ImputedAge <= 40 then 'OlderAdult' when ImputedAge <= 65 then 'OvertheHill' else 'Senior' end as 'AgeClass' from combined a")
sapply(combined, function(x) sum(is.na(x)))
library(caret)
head(combined)
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined where set = 'Train'")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined where Set = 'Train'")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined where Set = 'train' ")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined where Set = 'train'")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined where Set = 'train'")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined a where Set = 'train'")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived from combined a
where Set = 'train'")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived
from combined a
Where Set = 'train'")
train2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass, Survived
from combined a
Where [Set] = 'train'")
test2 <- sqldf("select Pclass, Sex, SibSP, Parch, Title, AgeClass
from combined a
Where [Set] = 'test'")
library(caret)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
modelfit <- train(Survived ~., data = train2, method = "rf", trControl = fitControl)
?train
modelfit <- train(Survived ~., data = train2, method = "rf", trControl = binomial)
modelfit <- train(Survived ~., data = train2, method = "rf", trControl = fit_control)
modelfit <- train(Survived ~., data = train2, method = "rf")
fitControl <- trainControl(method = "cv",
number = 2,
allowParallel = TRUE)
modelfit <- train(Survived ~., data = train2, method = "rf", trControl = fitControl)
#Load Libraries
library(caret)
library(parallel)
library(doParallel)
#Set Working Direcotry
setwd("C:/Users/Marin Family/Documents/R/Machine Learning Assignment")
#Set Seed
set.seed(1234)
#Load Downloaded Train and Test Files from Working Directory
training <- read.csv(file="pml-training.csv", na.strings=c("", "NA", "NULL"))
testing <- read.csv(file="pml-testing.csv", na.strings=c("", "NA", "NULL"))
#Remove NA columns and indentifier columns
training <- training[, colSums(is.na(training))==0]
dim(training)
#After review, the first 7 columns as they do not seem relevant to the outcome.
training <- training[,-c(1:7)]
testing <- testing[, -c(1:7)]
dim(training)
dim(testing)
#Create my test set
inTrain <- createDataPartition(y=training$classe, p=.7, list = FALSE)
trainset <- training[inTrain,]
#Create My Test Data
mytestset <- training[-inTrain,]
dim(trainset)
dim(mytestset)
#Load Coursera Test Data
testset <- read.csv("pml-testing.csv")
dim(testset)
train2$Survived <- as.factor(train2$Survived)
modelfit <- train(classe ~., data = trainset, method = "rf", trControl = fitControl)
summary(modelfit)
summary(modelfit)
modelfit
modelfit$results
modelfit$finalModel
View(train2)
View(train2)
modelfit$results
modelfit$modelInfo
modFit <- train(classe ~., method = "gbm", data=trainset, verbose = FALSE)
modFit
pred <- predict(modelfit, newdata = test2)
modFit <- train(Survived ~., method = "gbm", data=train2, verbose = FALSE)
modFit
pred <- predict(modelfit, newdata = test2)
pred <- predict(modFit, newdata = test2)
pred <- predict(modelfit, newdata = test2)
shade(10000, 0.05, 0, 'right', t_calc=9.98)
shade <- function(df, alpha, h0 = 0, sides='both', t_calc=NULL) {
e_alpha = alpha
if(sides == 'both'){
e_alpha = alpha / 2
}
cv = abs(qt(e_alpha, df))
curve(dt(x, df), from = -4, to = 4, ylab='P(x)', xaxt='n')
abline(v = 0, col = "black", lwd = 0.5)
labels = h0
at = 0
if(sides == 'both' | sides == 'left'){
x <- seq(-4, -abs(cv), len = 100)
y <- dt(x, df)
polygon(c(x, -abs(cv)), c(y, min(y)), col = "blue", border = NA)
lines(c(-cv, -cv), c(0, dt(-cv, df)), col = "black", lwd = 1)
text(-cv - (4 - cv) / 2, 0.05, e_alpha)
labels = c(round(-cv, 3), labels)
at = c(-cv, at)
}
if(sides == 'both' | sides == 'right'){
x <- seq(abs(cv), 4, len = 100)
y <- dt(x, df)
polygon(c(abs(cv), x), c(min(y), y), col = "blue", border = NA)
lines(c(cv, cv), c(0, dt(cv, df)), col = "black", lwd = 1)
text(cv + (4 - cv) / 2, 0.05, e_alpha)
labels = c(labels, round(cv, 3))
at = c(at, cv)
}
if(is.numeric(t_calc)){
abline(v = t_calc, col = "red", lwd = 2)
text(t_calc + 0.5, 0.2, t_calc, col = "red")
}
axis(1, at=at, labels=labels)
}
shade(10000, 0.05, 0, 'right', t_calc=9.98)
1-pf(2.86, 1, 99999999) #works in R
shade(10000, 0.05, 0, 'both', t_calc=9.98)
shade(10000, 0.05, 0, 'both', t_calc=1.42)
setwd("C:/Users/Marin Family/Desktop/Statistical Foundations for Data Science/Unit 5")
EducData <- read.xlsx("ex0525_2_2.xlsx", sheetIndex = "ex0525")
EducData$Income2005 <- log(EducData$Income2005)
library(sqldf)
EducData <- sqldf("select * from EducData order by Educ asc")
fit <- aov(Income2005 ~ Educ, data=EducData)
summary(fit)
setwd("C:/Users/Marin Family/Desktop/Statistical Foundations for Data Science/Unit 5")
EducData <- read.xlsx("ex0525_2_2.xlsx", sheetIndex = "ex0525")
EducData$Income2005 <- log(EducData$Income2005)
EducData <- read.xlsx("ex0525_2_2.xlsx", sheetIndex = "ex0525")
library(xlsx)
EducData <- read.xlsx("ex0525_2_2.xlsx", sheetIndex = "ex0525")
EducData$Income2005 <- log(EducData$Income2005)
library(sqldf)
EducData <- sqldf("select * from EducData order by Educ asc")
fit <- aov(Income2005 ~ Educ, data=EducData)
summary(fit)
a = c(-20.1,-8.1,13.3,18.1,23.6,34.2,56.1)
b = c(18.2,40.8,43.2,45,46.7,53.1,75.5,85.4,85.6)
wilcox.test(U,L, alt = "two.sided", mu = 0, conf.int = T, conf.level = .95, exact = T, correct = T)
wilcox.test(U,L, alt = "two.sided", mu = 0, conf.int = T, conf.level = .95, exact = T, correct = T)
library(xlsx)
library(olsrr)
setwd("C:/Users/Marin Family/Desktop/Statistical Foundations for Data Science/Unit 11")
autism <- read.xlsx("AutismDataProb29_2_2_2.xlsx", "Autism Data Prob 29")
autism$Prevalence <- log(autism$Prevalence)
#autism$Year <- log(autism$Year)
model=lm(Year~Prevalence, data = autism)
plot(autism$Year, autism$Prevalence)
newx=autism$Prevalence
newx=sort(newx)
prd_c=predict(model, newdata= data.frame(Prevalence = newx), interval=c("confidence"), type = c("response"), level=.95)
prd_c
prd_p=predict(model, newdata= data.frame(Prevalence = newx), interval=c("prediction"), type = c("response"), level=.95)
prd_p
#Plot with confidence and prediction intervals
plot(autism[,2],autism[,1],xlim = c(0,3), ylim = c(1990,2010),xlab = "Prevelance",ylab = "Year", main = "Autism Prevelance per Year")
abline(model, col = "red")
lines(newx,prd_c[,2],col = "blue",lty = 2, lwd = 2)
lines(newx,prd_c[,3],col = "blue", lty = 2, lwd = 2)
lines(newx,prd_p[,2],col = "green", lty = 2, lwd = 2)
lines(newx,prd_p[,3],col = "green", lty = 2, lwd = 2)
autism.lm <- lm(Prevalence ~ Year, data = autism)
newx <- autism$Year
newx <- sort(newx)
prd_c <- predict(autism.lm, newdata= data.frame(Year = newx), interval=c("confidence"),
type = c("response"), level=0.95)
prd_p <- predict(autism.lm, newdata= data.frame(Year = newx), interval=c("prediction"),
type = c("response"), level=0.95)
#Plot with confidence and prediction intervals
plot(autism[,1], autism[,2],xlim = c(1990,2002), ylim = c(-5,25), xlab = "Year",
ylab = "Prevalence", main = "Autism Prevalence")
abline(autism.lm, col = "red")
lines(newx,prd_c[,2],col = "blue",lty = 2, lwd = 2)
lines(newx,prd_c[,3],col = "blue", lty = 2, lwd = 2)
lines(newx,prd_p[,2],col = "green", lty = 2, lwd = 2)
lines(newx,prd_p[,3],col = "green", lty = 2, lwd = 2)
library(xlsx)
library(olsrr)
setwd("C:/Users/Marin Family/Desktop/Statistical Foundations for Data Science/Unit 11")
autism <- read.xlsx("AutismDataProb29_2_2_2.xlsx", "Autism Data Prob 29")
autism.lm <- lm(Prevalence ~ Year, data = autism)
newx <- autism$Year
newx <- sort(newx)
prd_c <- predict(autism.lm, newdata= data.frame(Year = newx), interval=c("confidence"),
type = c("response"), level=0.95)
prd_p <- predict(autism.lm, newdata= data.frame(Year = newx), interval=c("prediction"),
type = c("response"), level=0.95)
#Plot with confidence and prediction intervals
plot(autism[,1], autism[,2],xlim = c(1990,2002), ylim = c(-5,25), xlab = "Year",
ylab = "Prevalence", main = "Autism Prevalence")
abline(autism.lm, col = "red")
lines(newx,prd_c[,2],col = "blue",lty = 2, lwd = 2)
lines(newx,prd_c[,3],col = "blue", lty = 2, lwd = 2)
lines(newx,prd_p[,2],col = "green", lty = 2, lwd = 2)
lines(newx,prd_p[,3],col = "green", lty = 2, lwd = 2)
library(xlsx)
library(olsrr)
setwd("C:/Users/Marin Family/Desktop/Statistical Foundations for Data Science/Unit 11")
autism <- read.xlsx("AutismDataProb29_2_2_2.xlsx", "Autism Data Prob 29")
autism$Prevalence <- log(autism$Prevalence)
#autism$Year <- log(autism$Year)
model=lm(Year~Prevalence, data = autism)
plot(autism$Year, autism$Prevalence)
newx=autism$Prevalence
newx=sort(newx)
prd_c=predict(model, newdata= data.frame(Prevalence = newx), interval=c("confidence"), type = c("response"), level=.95)
prd_c
prd_p=predict(model, newdata= data.frame(Prevalence = newx), interval=c("prediction"), type = c("response"), level=.95)
prd_p
#Plot with confidence and prediction intervals
plot(autism[,2],autism[,1],xlim = c(-5,25), ylim = c(1990,2010),xlab = "Prevelance",ylab = "Year", main = "Autism Prevelance per Year")
abline(model, col = "red")
lines(newx,prd_c[,2],col = "blue",lty = 2, lwd = 2)
lines(newx,prd_c[,3],col = "blue", lty = 2, lwd = 2)
lines(newx,prd_p[,2],col = "green", lty = 2, lwd = 2)
lines(newx,prd_p[,3],col = "green", lty = 2, lwd = 2)
library(investr)
calibrate(autism.lm, y0 = 166, interval = "inversion", mean.response =  TRUE, level = .95)
calibrate(autism.lm, y0 = 10, interval = "inversion", mean.response =  TRUE, level = .95)
setwd("C:/Users/Marin Family/Desktop/Statistical Foundations for Data Science/Unit 11")
autism <- read.xlsx("AutismDataProb29_2_2_2.xlsx", "Autism Data Prob 29")
autism.lm <- lm(Prevalence ~ Year, data = autism)
newx <- autism$Year
newx <- sort(newx)
prd_c <- predict(autism.lm, newdata= data.frame(Year = newx), interval=c("confidence"),
type = c("response"), level=0.95)
prd_p <- predict(autism.lm, newdata= data.frame(Year = newx), interval=c("prediction"),
type = c("response"), level=0.95)
#Plot with confidence and prediction intervals
plot(autism[,1], autism[,2],xlim = c(1990,2002), ylim = c(-5,25), xlab = "Year",
ylab = "Prevalence", main = "Autism Prevalence")
abline(autism.lm, col = "red")
lines(newx,prd_c[,2],col = "blue",lty = 2, lwd = 2)
lines(newx,prd_c[,3],col = "blue", lty = 2, lwd = 2)
lines(newx,prd_p[,2],col = "green", lty = 2, lwd = 2)
lines(newx,prd_p[,3],col = "green", lty = 2, lwd = 2)
calibrate(autism.lm, y0 = 10, interval = "inversion", mean.response =  TRUE, level = .95)
1-pf(2.86, 1, 99999999) #works in R
library(tm)
library(rJava)
library(RWeka)
library(dplyr)
library(ggplot2)
library(SnowballC)
library(wordcloud)
